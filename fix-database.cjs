const fs = require('fs');
const { Pool } = require('pg');

async function fixDatabase() {
    // ŸÇÿ±ÿßÿ°ÿ© DATABASE_URL ŸÖŸÜ ŸÖŸÑŸÅ .env
    const envContent = fs.readFileSync('.env', 'utf8');
    const DATABASE_URL = envContent.match(/DATABASE_URL=(.+)/)?.[1];
    
    if (!DATABASE_URL) {
        console.error('‚ùå DATABASE_URL not found in .env');
        return;
    }

    console.log('üîó Connecting to database...');
    const pool = new Pool({
        connectionString: DATABASE_URL,
        ssl: {
            rejectUnauthorized: false
        }
    });

    try {
        // ÿßÿÆÿ™ÿ®ÿßÿ± ÿßŸÑÿßÿ™ÿµÿßŸÑ
        const client = await pool.connect();
        console.log('‚úÖ Connected to database successfully');

        // ÿßŸÑÿ™ÿ≠ŸÇŸÇ ŸÖŸÜ ÿ£ŸÜŸàÿßÿπ ÿßŸÑŸÖÿµÿ±ŸàŸÅÿßÿ™ ÿßŸÑŸÖŸÉÿ±ÿ±ÿ©
        console.log('üîç Checking for duplicate expense types...');
        const duplicateCheck = await client.query(`
            SELECT name, project_id, COUNT(*) as count 
            FROM expense_types 
            GROUP BY name, project_id 
            HAVING COUNT(*) > 1
        `);
        
        if (duplicateCheck.rows.length > 0) {
            console.log('‚ö†Ô∏è  Found duplicates:', duplicateCheck.rows);
            
            // ÿ≠ÿ∞ŸÅ ÿßŸÑŸÖŸÉÿ±ÿ±
            console.log('üßπ Removing duplicates...');
            await client.query(`
                DELETE FROM expense_types a USING expense_types b 
                WHERE a.id < b.id 
                AND a.name = b.name 
                AND (a.project_id IS NULL AND b.project_id IS NULL 
                     OR a.project_id = b.project_id)
            `);
        }

        // ÿ•ÿØÿ±ÿßÿ¨ ÿ£ŸÜŸàÿßÿπ ÿßŸÑŸÖÿµÿ±ŸàŸÅÿßÿ™ ÿßŸÑÿßŸÅÿ™ÿ±ÿßÿ∂Ÿäÿ©
        console.log('üìù Inserting default expense types...');
        const insertResult = await client.query(`
            INSERT INTO expense_types (name, description, is_active) 
            SELECT name, description, is_active FROM (VALUES 
                ('ÿ±ÿßÿ™ÿ®', 'ŸÖÿµÿ±ŸàŸÅÿßÿ™ ÿßŸÑÿ±Ÿàÿßÿ™ÿ® ŸàÿßŸÑÿ£ÿ¨Ÿàÿ±', true),
                ('ŸÖŸàÿßÿØ ÿ®ŸÜÿßÿ°', 'ŸÖŸàÿßÿØ ÿßŸÑÿ®ŸÜÿßÿ° ŸàÿßŸÑÿ•ŸÜÿ¥ÿßÿ°', true),
                ('ŸÜŸÇŸÑ ŸàŸÖŸàÿßÿµŸÑÿßÿ™', 'ŸÖÿµÿ±ŸàŸÅÿßÿ™ ÿßŸÑŸÜŸÇŸÑ ŸàÿßŸÑŸÖŸàÿßÿµŸÑÿßÿ™', true),
                ('ÿ£ÿØŸàÿßÿ™ ŸàŸÖÿπÿØÿßÿ™', 'ÿßŸÑÿ£ÿØŸàÿßÿ™ ŸàÿßŸÑŸÖÿπÿØÿßÿ™ ÿßŸÑŸÖÿÆÿ™ŸÑŸÅÿ©', true),
                ('ÿÆÿØŸÖÿßÿ™ ÿπÿßŸÖÿ©', 'ÿßŸÑÿÆÿØŸÖÿßÿ™ ÿßŸÑÿπÿßŸÖÿ© ŸàÿßŸÑÿßÿ≥ÿ™ÿ¥ÿßÿ±ÿßÿ™', true),
                ('ÿµŸäÿßŸÜÿ©', 'ÿ£ÿπŸÖÿßŸÑ ÿßŸÑÿµŸäÿßŸÜÿ© ŸàÿßŸÑÿ•ÿµŸÑÿßÿ≠', true)
            ) AS new_data(name, description, is_active)
            WHERE NOT EXISTS (
                SELECT 1 FROM expense_types 
                WHERE expense_types.name = new_data.name 
                AND expense_types.project_id IS NULL
            )
            RETURNING *
        `);

        console.log(`‚úÖ Inserted ${insertResult.rows.length} expense types`);

        // ÿπÿ±ÿ∂ ÿ¨ŸÖŸäÿπ ÿ£ŸÜŸàÿßÿπ ÿßŸÑŸÖÿµÿ±ŸàŸÅÿßÿ™
        const allExpenseTypes = await client.query('SELECT * FROM expense_types ORDER BY name');
        console.log('üìä Current expense types:');
        allExpenseTypes.rows.forEach(row => {
            console.log(`  - ${row.name} (ID: ${row.id}, Project: ${row.project_id || 'Global'})`);
        });

        client.release();
        console.log('‚úÖ Database fix completed successfully!');

    } catch (error) {
        console.error('‚ùå Database error:', error.message);
    } finally {
        await pool.end();
    }
}

fixDatabase();
