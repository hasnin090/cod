يحاول Netlify البحث عن ملف بناءً على عدة مرشحات XOR، وعندما تفشل جميعها، ينتهي بنا الأمر بعرض صفحة خطأ 404. على سبيل المثال، عند إرسال طلب إلى ، /example/يتحقق من و و و ومجموعات أخرى (ليس بالضرورة بنفس الترتيب) قبل الوصول إلى صفحة الخطأ 404. مع ذلك، إذا لم تكن تتوقع ظهور خطأ 404 على عنوان URL معين، فقد ترغب في معرفة السبب وإمكانية إصلاحه. يهدف هذا الدليل إلى تغطية الأسباب الأكثر شيوعًا (وحلولها) على Netlify. يفترض هذا الدليل أن الأسباب الشائعة لخطأ 404 (مثل عنوان URL غير صحيح) لا تنطبق./example/index.html/example.html/example/home.html

دليل نشر غير صحيح: إذا حاول شخص ما نشر موقعه مباشرةً، دون أي خطوة بناء، فقد لاحظنا حدوث سيناريو شائع وهو رفع الموقع إلى مستودع git ووضع جميع الملفات داخل مجلد فرعي. ومع ذلك، عند ربط الموقع بـ Netlify، ونظرًا لعدم وجود إطار عمل، نترك مسؤولية ضبط الإعدادات الصحيحة للمستخدم، وبعض المستخدمين لا يُهيئون دليل النشر. وبالتالي، عند زيارة الموقع، يظهر خطأ 404، لأن الملفات موجودة بالفعل داخله https://their-site.netlify.app/sub-folder. في هذه الحالة، إما أن تنقل جميع ملفاتك خارج المجلد الفرعي أو تُغيّر دليل النشر في إعدادات موقع Netlify.

قاعدة إعادة توجيه SPA مفقودة: تُستخدم أدوات متنوعة، مثل Create React App وVite وAngular وغيرها، لإنشاء تطبيقات صفحة واحدة. لا تحتوي هذه التطبيقات على صفحة HTML لكل مسار، بل تعتمد على JavaScript لإدارة التنقل. بالنسبة لهذه التطبيقات، من المهم توفير المحتويات التالية:

/* /index.html 200
كمحتويات الملف _redirectsالتي يجب أن توجد في publicالمجلد (أو مجلد مشابه)، بحيث يتم نسخها إلى دليل النشر الخاص بك عند إنشاء الموقع.

محتوى مُقدَّم من جانب الخادم: تدعم العديد من أطر العمل هذه الأيام، مثل Next.js وGatsby وNuxt وAstro وRemix وSvelteKit وغيرها، تقنية العرض من جانب الخادم على Netlify. يُحافظ Netlify رسميًا على تكاملاته الخاصة مع Next.js وGatsby، بينما تُحافظ أطر العمل الأخرى على تكاملاتها مع Netlify. في حالة Next.js، على سبيل المثال، يُمكن لوقت تشغيل Next.js إنشاء عدة عمليات إعادة توجيه حتى لموقع Next.js صغير الحجم. حتى في حالة Gatsby، إذا كنت تستخدم SSR/DSG، فسنُنشئ بعض عمليات إعادة التوجيه. بالنسبة لأي إطار عمل آخر يستخدم SSR باستخدام وظائف Netlify، سيكون هناك عملية إعادة توجيه واحدة على الأقل تُعالج هذا التوجيه. لذا، إذا لم يُظهر نشرك أي عمليات إعادة توجيه (أو عددًا أقل نسبيًا من عمليات إعادة التوجيه في حالة Next.js)، فتأكد من حدوث خطأ في التكامل. قد يكون من المفيد محاولة استشارة مستندات التكامل المعني للتأكد من تكوينه بشكل صحيح.

قد يكون هناك موقف آخر مع SSR وهو أنه يمكنك إرسال 404 لطلب يعتمد على بعض المنطق الشرطي الذي قد يكون لديك في الكود الخاص بك.

في حالة أن الخطأ 404 يأتي من عنوان URL بالوكالة، تأكد من أن وجهة الوكيل لا تقدم خطأ 404.

في حال تحميل صفحة HTML بشكل جيد، ولكن الأصول مفقودة أو تظهر خطأ 404، فتأكد من صحة مساراتها. يتحقق تطبيق React من homepageوجوده package.json، وبالتالي، قد يُهيئ مسارات الأصول بشكل مختلف عن المتوقع.

تحقق مما إذا كنت تقوم بتشغيل أي وظائف Edge التي قد تمنع الطلب.

إذا كنت تستخدم عمليات إعادة الكتابة لتوكيل موقع إلى دليل فرعي لموقع آخر، فتأكد من نشر الأصول على عنوان URL يطابق بنية دليل مصدر الوكيل. يمكنك دائمًا استخدام <base>عناوين URL للعلامات أو العناوين المطلقة لضمان تحميل الأصول بشكل موثوق.

في حالة وجود شكوك أو ارتباك، قد يكون من المفيد محاولة إنشاء موقعك محليًا (باستخدام أمر البناء وليس خادم التطوير) أو تصفح/تنزيل النشر الخاص بك كما هو موضح في هذه المقالة: ميزة جديدة: تصفح الملفات في النشر الخاص بك باستخدام متصفح ملفات النشر ، للتأكد من وجود ملف بالفعل في المسار الذي تطلبه.

إذا لم ينطبق عليك أيٌّ مما سبق، أو إذا كنت لا تزال تواجه مشاكل، يُرجى فتح موضوع آخر للمناقشة. تأكد من تضمين أكبر قدر ممكن من التفاصيل 